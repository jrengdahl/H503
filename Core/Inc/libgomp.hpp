// Copyright (c) 2009, 2023 Jonathan Engdahl
// BSD license -- see the accompanying README.txt

#ifndef LIBGOMP_H
#define LIBGOMP_H

#define GOMP_STACK_SIZE 512

#define GOMP_MAX_NUM_THREADS 8
#define GOMP_NUM_TEAMS 4
#define GOMP_NUM_TASKS 16

#define OMP_NUM_THREADS 4

extern void libgomp_init();

extern "C" int omp_get_thread_id();


extern int omp_verbose;
#define OMP_VERBOSE_DEFAULT 0

// the code that constitutes a task
typedef void TASKFN(void *);


// a task is defined by code and data
struct task
    {
    TASKFN *fn;             // the thread function generated by OMP
    char *data;             // the thread's local data pointer
    };

// an omp_thread
struct omp_thread
    {
    // the thread's context
    Context context;        // the thread's registers

    int id = 0;             // a unique ID for each thread, also the index into the thread table
    int team_id = 0;        // the number of a thread within the team

    struct task *task = 0;  // the thread's implicit task, nonzero if running

    omp_thread *team = 0;   // pointer to the master thread of the team this thread is a member of
    omp_thread *next = 0;   // link to the next team member

    unsigned single = 0;
    bool arrived = false;   // arrived at a barrier, waiting for other threads to arrive
    bool mwaiting = false;  // waiting on a mutex

    // stuff pertaining to this thread as a team master
    int team_count = 0;
    omp_thread *members = 0; // link to the first thread of the team this thread is the master of
    bool mutex = false;
    unsigned tsingle = 0;
    int sections_count = 0;
    int sections = 0;
    int section = 0;
    int tasks = 0;
    void *copyprivate = 0;


    // debug data
    char *stack_low;        // low address of the stack (for debug)
    char *stack_high;       // high address of the stack pointer
    };


extern "C"
inline omp_thread *omp_this_thread()
    {
    omp_thread *thread;

    __asm__ __volatile__("    mov %[thread], r9" : [thread]"=r"(thread));

    return thread;
    }

extern "C"
inline omp_thread *omp_this_team()
    {
    omp_thread &thread = *omp_this_thread();
    omp_thread *team = thread.team_id == 0 ? &thread : thread.team;
    return team;
    }


#endif // LIBGOMP_H
