Bear Metal Shell
A small embedded command line processor.

Bear Metal Threads
Extremely minimal non-preemptive thread switching for bare metal.

/*
 * Copyright (c) 2009, 2023 Jonathan Engdahl
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of other
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * (This is the BSD license, see http://opensource.org/licenses/BSD-3-Clause)
 *
 */



The original version of this code was developed in 2009 for a home
project that was intended to result in a digital controller for my
trolling motor that had a burned out speed control switch. The
controller was a Luminary Micro Cortex-M3 eval board. The motor driver
was made for RC model planes. It worked fine on dry land, but when I got
it into the water it went poof after about a minute and the magic smoke
came out. Evidently the motor's resistance and current were compatible
with the RC drive circuit, but the inductance of the trolling motor was
a lot more than an airplane motor. Under load, the inductive kick took
out the catch diodes.

The motor controller wound up in the scrap pile, I got a new mechnical
switch for the boat motor and gave it away, but the firmware lives on,
and on, and on. It found many uses, including some products of my
employer. The files here are derived from the original code I wrote for
the Luminary Micro Cortex-M3, or are newly written since I retired.


Manifest

My contributions in this directory include, but are not necessarily
limited to the following files. The list includes the #include files
which should be located in a nearby direcetory such as ../Inc. Most
other files in these directories are from ST Micro, and are probably 
auto-generated by STM CubeMX.


README.txt          This file
RamTest.cpp         A minimal RAM tester
background.cpp      Powerup init for my code, then it becomes the background polling loop
bear.cpp            Print the Bear Metal logo.
bogodelay.cpp       Delay the specificed number of CPU cycles
dump.cpp            Memory dump
getline.cpp         Get a line of input, with command line editing and history
interp.cpp          The command line interprter
libgomp.cpp         OpenMP library for bare metal (experimental, under development)
printf.cpp          printf
serial.cpp          Console interface routines for serial, USB VCP, or whatever 
summary.cpp         Print a summary of the memory
thread.cpp          The implementation of Bear Metal Threads

CriticalRegion.hpp  Disable interrupts around a block of code. Safe for break, return, etc.
FIFO.hpp            A wait-free, single-writer-single-reader FIFO (aka ring buffer)
ThreadFIFO.hpp      A subclass if FIFO which implements thread suspend/resume.
atomic.h            Wrap a small block of code with LDREX/STREX, making its operation on a variable atomic.
bogodelay.hpp       For bogodelay.cpp
boundaries.h        Mapping of linker regions for summary.cpp
cmsis.h             A wrapper for cmsis_compiler.h which remedies some ommissions.
cyccnt.hpp          Support for the cycle counter, including high precision timing measurements.
libgomp.hpp         For libcomp.cpp
local.h             Local config and definitions for interp, getline, printf, etc.
random.hpp          A famous random number generator, simple, fast, and fairly good.
serial.h            For serial.cpp.
thread.hpp          For Thread.cpp.
